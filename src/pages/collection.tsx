import { zodResolver } from "@hookform/resolvers/zod";
import Head from "next/head";
import { useForm } from "react-hook-form";
import Image from "next/image";
import { SearchSchema, type ISearchSchema } from "~/utils/validator/userInput";
// import { options } from "~/utils/dataOptions";
// import { UserSearchResultCard } from "~/components/userSearchResultCard";
import { api } from "~/utils/api";

import type { GetServerSidePropsContext } from "next";
import { getServerAuthSession } from "~/server/auth";
import Header from "~/components/Header";
import Link from "next/link";
import { useEffect } from "react";
export default function Interest() {
  const {
    data: searchResults,
    status,
    mutate,
  } = api.event.getEventBySearch.useMutation();
  const { handleSubmit, register } = useForm<ISearchSchema>({
    resolver: zodResolver(SearchSchema),
    mode: "onBlur",
    defaultValues: {
      search: "",
    },
  });
  useEffect(() => {
    mutate({ search: "" });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return (
    <>
      <Head>
        <title>ðŸ’¡ðŸŽ° Bulbbet</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1"
        />
      </Head>
      <main className="flex h-screen flex-col items-center justify-center">
        <Header />
        <div className="absolute top-0 flex h-screen w-full flex-col pt-10">
          <div className="flex w-full items-center justify-center">
            <div className="z-20 mx-0 mt-16 flex flex-col gap-3 rounded-xl bg-base-200 p-4 drop-shadow-lg sm:top-20 sm:mt-20 sm:flex-row sm:p-6">
              <div className="flex w-full max-w-2xl flex-grow-0 sm:w-96 sm:flex-shrink">
                <input
                  className="input input-bordered input-primary w-full"
                  placeholder="Search"
                  {...register("search")}
                />
              </div>
              <button
                className="btn btn-primary"
                onClick={handleSubmit((data) => mutate(data))}
              >
                Search
              </button>
            </div>
          </div>
          <div className="flex w-full items-center justify-center">
            <div className="items-center justify-center overflow-y-auto pt-5">
              {searchResults?.[0] ? (
                <div className="mb-10 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
                  {searchResults?.map((result) => {
                    return (
                      <div
                        className="card w-72 bg-base-200 shadow-xl"
                        key={result.id}
                      >
                        <div>
                          <div className="relative flex h-72 w-full flex-grow-0 overflow-hidden rounded-t-xl">
                            <Image
                              src={result.imageUrl}
                              alt="Picture of this event"
                              fill
                              className="object-cover"
                            />
                          </div>
                        </div>
                        <progress
                          className={`flex-inline progress ${
                            true ? "progress-success" : "bg-error"
                          } flex w-full`}
                          value={result.nextAgreePrice.toString()}
                          max="100"
                        ></progress>
                        <div className="flex w-full flex-row justify-between px-1">
                          <p className="text-center text-lg">
                            {result.nextAgreePrice.toString()}
                          </p>
                          <p className="text-center text-lg">
                            {100 - parseFloat(result.nextAgreePrice.toString())}
                          </p>
                        </div>
                        <div className="card-body">
                          <h2 className="card-title">{result.name}</h2>
                          <p>{result.resolutionDetails}</p>
                          <div className="card-actions justify-end">
                            <Link
                              className={`btn btn-primary`}
                              href={`/event/${result.id}`}
                            >
                              Purchase
                            </Link>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              ) : status === "loading" ? (
                <div className="loading loading-spinner self-center"></div>
              ) : (
                <div className="w-full text-center">No results</div>
              )}
            </div>
          </div>
        </div>
      </main>
    </>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getServerAuthSession(context);
  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
}
